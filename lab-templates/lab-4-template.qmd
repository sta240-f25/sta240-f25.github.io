---
title: "Lab 4"
subtitle: Duke STA 240 Fall 2025
author: replace this text with your name
format: 
  pdf:
    toc: false
editor: 
  mode: source
---

This package provides the language model we're using, and you may have to install it in your container before loading:

```{r}
library(kgrams)
```

Also concealed within this document is a lot of code we are providing you, but that you should not modify in any way!

```{r}
#| include: FALSE

# KEEP WALKIN' PAL! DO NOT EDIT ANY OF THIS.

# ========================================================
# the set of words in A Midsummer Night's Dream
# ========================================================

.preprocess <- function(x) {
    # Remove speaker name and locations (boldfaced in original html)
    x <- gsub("<b>[A-z]+</b>", "", x)
    # Remove other html tags
    x <- gsub("<[^>]+>||<[^>]+$||^[^>]+>$", "", x)
    # Apply standard preprocessing including lower-case
    x <- kgrams::preprocess(x)
    # Collapse to a single string to avoid splitting into more sentences at the end of lines
    x <- paste(x, collapse = " ")
    return(x)
}

preprocessed <- .preprocess(midsummer)[1]
without_punct <- gsub("[][!#$%()*,.:;<=>@^_`|~.{}]?", "", preprocessed)
midsummer_words <- unique(strsplit(without_punct, split = " ")[[1]])
midsummer_words <- midsummer_words[2:length(midsummer_words)]

# ========================================================
# train the language model
# ========================================================

.tknz_sent <- function(x) {
        # Tokenize sentences
        x <- kgrams::tknz_sent(x, keep_first = TRUE)
        # Remove empty sentences
        x <- x[x != ""]
        return(x)
}

freqs <- kgram_freqs(midsummer, # Read Shakespeare's text from connection
                     N = 5, # Store k-gram counts for k <= 5
                     .preprocess = .preprocess,  # preprocess text
                     .tknz_sent = .tknz_sent, # tokenize sentences
                     verbose = FALSE
                     )

kn <- language_model(freqs, "kn", D = 0.75)

# ========================================================
# helper functions for simulating the next word
# ========================================================

get_prob <- function(word, context = "the", model = kn){
  probability(word %|% context, model = model)
}

change_temperature <- function(probs, temperature){
  new_probs <- probs ^ (1/temperature)
  new_probs <- new_probs / sum(new_probs)
  return(new_probs)
}

next_word_probs <- function(context, words = midsummer_words, model = kn, temp = 1.0){
  raw_probs <- sapply(words, get_prob, context, model) # might not quite sum to one
  probs <- change_temperature(raw_probs, temp) # now they will
  return(data.frame(words = words, prob = probs / sum(probs), row.names = NULL))
}
```

# Task 1

Type words here.

```{r}
#| label: task-1

# add code here
```

{{< pagebreak >}}

# Task 2

Type words here.

```{r}
#| label: task-2

# add code here
```

{{< pagebreak >}}

# Task 3

Type words here.

```{r}
#| label: task-3

# add code here
```

{{< pagebreak >}}

# Task 4

Type words here.

```{r}
#| label: task-4

# add code here
```

{{< pagebreak >}}

# Task 5

Type words here.

```{r}
#| label: task-5

# add code here
```

{{< pagebreak >}}

# Task 6

Type words here.

```{r}
#| label: task-6

# add code here
```
